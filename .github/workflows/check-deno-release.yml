---
name: check image with latest deno exists

env:
  IMAGE_NAME: quay.io/ibotty/s2i-deno

on:
  workflow_dispatch:
  schedule:
  - cron: '0 0 * * *' # daily

jobs:
  latest_deno:
    name: deno version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_latest_deno.outputs.version }}
    steps:
    - name: Get latest deno release
      id: get_latest_deno
      shell: bash
      run: |
        set -euo pipefail
        get_latest_github_release() {
          local url="https://api.github.com/repos/$1/releases/latest"
          curl -fsSLH 'Accept: application/json' "$url" | jq -cr .tag_name
        }
        deno_version="$(get_latest_github_release denoland/deno)"
        echo "discovered  denoland/deno $deno_version"

        echo "version=$deno_version" >> $GITHUB_OUTPUT

  image_tags:
    name: Image tags
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.image_tags.outputs.tags }}
    steps:
    - name: get all image tags (excluding latest)
      id: image_tags
      shell: bash
      run: |
        set -euo pipefail
        get_image_tags() {
          skopeo inspect "docker://$1" | jq -cr '.RepoTags[]'
        }
        image_tags="$(get_image_tags "${{ env.IMAGE_NAME }}" | grep -Ev '^latest$' | xargs)"
        echo "discovered image tags for ${{ env.IMAGE_NAME }}: $image_tags"
        echo tags=\"$image_tags\" >> $GITHUB_OUTPUT

  build:
    name: Trigger build of new image
    runs-on: ubuntu-latest
    needs: [latest_deno, image_tags]
    if: ${{ ! contains(needs.image_tags.outputs.tags, needs.latest_deno.outputs.version) }}
    strategy:
      matrix:
        include:
        - tags: latest ${{ needs.latest_deno.outputs.version }}
          deno_version: ${{ needs.latest_deno.outputs.version }}
    steps:
    - name: trigger rebuild
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: "container-build.yml",
            ref: "main",
            inputs: {
              "deno_version": "${{ matrix.deno_version }}",
              "tags": "${{ matrix.tags }}"
            }
          });
